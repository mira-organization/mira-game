name: Main Pipeline

on:
  push:
  pull_request:
    branches:
      - develop

jobs:
  # This runs every time you push.
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev libudev-dev libwayland-dev libxkbcommon-dev

      - name: Cache Cargo Registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo Build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-

      - name: Build Project
        run: cargo test --release

  # This runs only if you contain "-build-test-release" in your push commit
  build-linux:
    name: Build for Linux
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.base_ref == 'develop' && contains(github.event.pull_request.title, '-build-test-release')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev libasound2-dev libudev-dev

      - name: Build Linux Release
        run: cargo build --release --target x86_64-unknown-linux-gnu

      - name: Package build
        run: |
          mkdir -p release
          zip -j release/linux_release.zip target/x86_64-unknown-linux-gnu/release/mira-game*

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux_release
          path: release/linux_release.zip

  build-windows:
    name: Build for Windows
    needs: [build-and-test, build-linux]
    runs-on: windows-latest
    if: github.event_name == 'pull_request' && github.base_ref == 'develop' && contains(github.event.pull_request.title, '-build-test-release')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - name: Add Windows Target
        run: rustup target add x86_64-pc-windows-gnu

      - name: Build Windows Release
        run: cargo build --release --target x86_64-pc-windows-gnu

      - name: Package build
        run: |
          mkdir -p release
          Compress-Archive -Path target\x86_64-pc-windows-gnu\release\mira-game.exe -DestinationPath release\windows_release.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows_release
          path: release/windows_release.zip

  build-macos:
    name: Build for macOS
    needs: [build-and-test, build-linux, build-windows]
    runs-on: macos-latest
    if: github.event_name == 'pull_request' && github.base_ref == 'develop' && contains(github.event.pull_request.title, '-build-test-release')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - name: Build macOS Release
        run: cargo build --release --target x86_64-apple-darwin

      - name: Package build
        run: |
          mkdir -p release
          zip -j release/macos_release.zip target/x86_64-apple-darwin/release/mira-game*

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos_release
          path: release/macos_release.zip

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.base_ref == 'develop' && contains(github.event.pull_request.title, '-build-test-release')
    needs: [build-and-test, build-linux, build-windows, build-macos]
    steps:
      - name: Download Linux Release Artifact
        uses: actions/download-artifact@v4
        with:
          name: linux_release
          path: ./release/linux

      - name: Download Windows Release Artifact
        uses: actions/download-artifact@v4
        with:
          name: windows_release
          path: ./release/windows

      - name: Download macOS Release Artifact
        uses: actions/download-artifact@v4
        with:
          name: macos_release
          path: ./release/macos

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME="v0.1.0-$(date +'%Y%m%d%H%M%S')"
          response=$(curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/releases \
            -d "{\"tag_name\": \"$TAG_NAME\", \"name\": \"Release $TAG_NAME\", \"draft\": false, \"prerelease\": false}")
          echo "$response"
          UPLOAD_URL=$(echo "$response" | jq -r .upload_url | sed -e "s/{?name,label}//")
          echo "UPLOAD_URL=$UPLOAD_URL" >> $GITHUB_ENV

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for dir in linux windows macos; do
            for file in ./release/$dir/*; do
              FILENAME=$(basename "$file")
              curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" -H "Content-Type: application/zip" \
                --data-binary @"$file" "$UPLOAD_URL?name=$FILENAME"
            done
          done
